&НаКлиенте
Процедура ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначения) Экспорт
	//Сообщить(ИдентификаторКоманды);
	//Для каждого Элемент из ОбъектыНазначения Цикл
	//     Сообщить(Элемент);    
	// КонецЦикла;
	Если ОбъектыНазначения.Количество() > 0 Тогда
		//ПараметрыПомещения = Новый Структура("ОбъектыНазначения", ОбъектыНазначения);
		
		//ОбработкаОкончанияПомещения = Новый ОписаниеОповещения("ОбработчикОкончанияПомещения", ЭтотОбъект, ПараметрыПомещения);
	
    	//НачатьПомещениеФайла(ОбработкаОкончанияПомещения, , , Истина, ЭтотОбъект.УникальныйИдентификатор);
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Если Диалог.Выбрать() Тогда
			СтрИмяФайла = Диалог.ПолноеИмяФайла;
			Загрузка();
			ЗаполнитьСправочники();
			
			Форма = ВладелецФормы;//ОткрытьФорму(ИмяФормыВладельца,КлючПоиска,,,Окн);				
			НовыйОбъект = Форма.Объект;
			
			Для Каждого СтрТЗ Из ТЗизФайла Цикл
				НоваяСтрокаПозиции = Форма.Объект.Позиции.Добавить();
				ИдентификаторТекущейПозиции = НоваяСтрокаПозиции.ПолучитьИдентификатор();
				//Элемент.ТекущаяСтрока = ИдентификаторТекущейПозиции;
				НоваяСтрокаПозиции.Подразделение = СтрТз.Участок;
				НоваяСтрокаПозиции.Должность = СтрТз.Должность;
				НоваяСтрокаПозиции.КоличествоСтавок = СтрТз.КоличествоЕд;
				НоваяСтрокаПозиции.ОкладТариф = СтрТз.Оклад;
				НоваяСтрокаПозиции.ОкладТарифМин = СтрТз.Оклад;
				НоваяСтрокаПозиции.ОкладТарифМакс = СтрТз.Оклад;
				//НоваяСтрокаПозиции.
				УправлениеШтатнымРасписаниемКлиент.ПозицииПриНачалеРедактирования(Форма, Форма.Объект.Позиции, ИдентификаторТекущейПозиции, Истина, Ложь);
				//НоваяСтрокаПозиции.Подразделение = 
				//ОткрытьДанныеПозиции(ИдентификаторТекущейПозиции);
				
			КонецЦикла;	
			
			//Сообщить(НовыйОбъект.Серии.Количество());
			КопироватьДанныеФормы(НовыйОбъект, Форма.Объект);
			//Сообщить(Форма.Объект.Разделы.Количество());
			Форма.ОбновитьОтображениеДанных();
			Форма.Модифицированность = истина;
			//КопироватьДанныеФормы(НовыйОбъект.Серии, ВладелецФормы.Объект.Серии);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОкончанияПомещения(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
    Если Результат Тогда
		//Сообщить(Адрес);
		Сообщения = Новый массив;
		Если ЭтоАдресВременногоХранилища(Адрес) Тогда
			ОбъектыНазначения = ДополнительныеПараметры.ОбъектыНазначения;
			Если ОбъектыНазначения.Количество()>0 Тогда
				Элемент = ОбъектыНазначения[0];
				КлючПоиска = Новый Структура("Ключ", Элемент);
				
				Окна = ПолучитьОкна();
				Для каждого Окн из Окна Цикл
					Если НЕ Окн.Основное И Найти(Окн.Заголовок, Элемент) Тогда
						Форма = ВладелецФормы;//ОткрытьФорму(ИмяФормыВладельца,КлючПоиска,,,Окн);
						
						НовыйОбъект = Форма.Объект;
						Отказ = Ложь;
						
						//Загрузить(ЭтаФорма.Команды.Найти("Загрузить"), НовыйОбъект);
						//ЗагрузкаНаСервере(Адрес, ВыбранноеИмяФайла, НовыйОбъект, Отказ, Сообщения);
						Загрузка();
						Для Каждого СтрТЗ Из ТЗизФайла Цикл
							НоваяСтрокаПозиции = Форма.Объект.Позиции.Добавить();
							ИдентификаторТекущейПозиции = НоваяСтрокаПозиции.ПолучитьИдентификатор();
							//Элемент.ТекущаяСтрока = ИдентификаторТекущейПозиции;
							
							УправлениеШтатнымРасписаниемКлиент.ПозицииПриНачалеРедактирования(Форма, Форма.Объект.Позиции, ИдентификаторТекущейПозиции, Истина, Ложь);
							//НоваяСтрокаПозиции.Подразделение = 
							//ОткрытьДанныеПозиции(ИдентификаторТекущейПозиции);
							
						КонецЦикла;	
						Если Не Отказ тогда
							//Сообщить(НовыйОбъект.Серии.Количество());
							КопироватьДанныеФормы(НовыйОбъект, Форма.Объект);
							//Сообщить(Форма.Объект.Разделы.Количество());
							Форма.ОбновитьОтображениеДанных();
							Форма.Модифицированность = истина;
							//КопироватьДанныеФормы(НовыйОбъект.Серии, ВладелецФормы.Объект.Серии);
							
						КонецЕсли;
						Если Сообщения.Количество() > 0 Тогда
							Для Каждого Сообщение Из Сообщения Цикл
								Сообщить(Сообщение);
							КонецЦикла;
						Иначе	
							//Закрыть();
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				//ЗагрузкаНаСервере(Адрес, ВыбранноеИмяФайла, ТаможеннаяДекларация, Отказ, Сообщения);
				//Для Каждого Сообщение Из Сообщения Цикл
				//	Сообщить(Сообщение);
				//КонецЦикла;
			КонецЕсли;
						
		КонецЕсли;	
    Иначе
        Сообщить("Файл не был помещен.");
		//Закрыть();
    КонецЕсли 
КонецПроцедуры

&НаКлиенте
Процедура Загрузка(Команда = Неопределено)
	//Первый этап - чтение файла
	
	//Попытка
	//	XLSОбъект = ПолучитьCOMОбъект(, "Excel.Application");
	//Исключение
	//	ПоказатьПредупреждение(,"Невозможно загрузить MS EXCEL !!!" + Символы.ПС + ОписаниеОшибки(), 10, "Ошибка");
	//	Возврат;
	//КонецПопытки;
	//Лист = XLSОбъект.ActiveSheet();
	//Если Лист = Неопределено Тогда 
	//	Лист = XLSОбъект.ActiveSheet;		
	//КонецЕсли;	
	//Если Лист = Неопределено Тогда 
	//	Лист = XLSОбъект.ActiveWorkbook.ActiveSheet;
	//КонецЕсли;
	Если ПустаяСтрока(СтрИмяФайла) Тогда
		Сообщить("Файл???");
		Возврат
	КонецЕсли;
	
	Попытка
		XLSОбъектОсновной = Новый COMОбъект("Excel.Application");
	Исключение
		ПоказатьПредупреждение(,"Невозможно загрузить MS EXCEL !!!" + Символы.ПС + ОписаниеОшибки(), 10, "Ошибка");
		Возврат;
	КонецПопытки;		
	XLSОбъектКниги = XLSОбъектОсновной.WorkBooks;					
	Попытка
		XLSОбъект = XLSОбъектКниги.Open(СтрИмяФайла);
	Исключение
		ПоказатьПредупреждение(,"Невозможно открыть файл " + СтрИмяФайла + " !!!" + Символы.ПС + ОписаниеОшибки(), 10, "Ошибка");
		Возврат;
	КонецПопытки;		
	чНомерСтраницы=1;
	Лист = XLSОбъект.Sheets(чНомерСтраницы);
	//XLSОбъект.Application.Caption = "Открыто из 1С";
	
	Ячейка = Лист.Range("A1:Z50").Find("Всего в месяц,");
	Если Ячейка = Неопределено Тогда
		КонецКолонокНачислений = 11;
		НачалоДанных = 13;
	Иначе	
		КонецКолонокНачислений = Ячейка.Column - 1;		
		НачалоДанных = Ячейка.Row;
	КонецЕсли;	
	
	ТЗизФайла.Очистить();
	ТЗВидыНачислений.Очистить();
	ТЗДляВводаВидовНачислений.Очистить();
	
	НачСтр = НачалоДанных+3;
	КонСтр = 10000;
	ПодразделениеСтр = "";
	УчастокСтр = "";
	Для Сч=Макс(НачСтр,1) По КонСтр Цикл
		СтрокаСостояния="Обработка строки № "+Сч+": ";
		
		Если СокрЛП(Лист.Cells(Сч,1).Text) <> "" Тогда			
			ПодразделениеСтр=СокрЛП(Лист.Cells(Сч,1).Text);
		КонецЕсли;	
		Если ПодразделениеСтр = "Итого по Обществу:" ИЛИ Лист.Cells(Сч,4).Text = "" Тогда
			Прервать;
		КонецЕсли;
		Если ПодразделениеСтр = "Итого:" Тогда
			Продолжить;
		КонецЕсли;	
		
		Если СокрЛП(Лист.Cells(Сч,2).Text) <> "" Тогда
			УчастокСтр=СокрЛП(Лист.Cells(Сч,2).Text);
		КонецЕсли;
		Если УчастокСтр = "Итого:" Тогда
			Продолжить;
		КонецЕсли;	
		
		НовСтрТЗ = ТЗизФайла.Добавить();
		
		НовСтрТЗ.ПодразделениеСтр = ПодразделениеСтр;
		Если УчастокСтр = "" Тогда
			НовСтрТЗ.УчастокСтр = ПодразделениеСтр;
		Иначе	
			НовСтрТЗ.УчастокСтр = УчастокСтр;
		КонецЕсли;	
		
		ДолжностьСтр=СокрЛП(Лист.Cells(Сч,3).Text);
		НовСтрТЗ.ДолжностьСтр = ДолжностьСтр;
		
		КоличествоЕд=Лист.Cells(Сч,4).Value;
		НовСтрТЗ.КоличествоЕд = КоличествоЕд;
		
		НовСтрТЗ.ИДСтроки = Сч;
		
		Для НомерКолонки = 5 По КонецКолонокНачислений Цикл
			Если Лист.Cells(Сч,НомерКолонки).Value <> Неопределено И СокрЛП(Лист.Cells(НачалоДанных,НомерКолонки).Text) <> "" Тогда 
				НовСтрокаНачисление = ТЗВидыНачислений.Добавить();
				НовСтрокаНачисление.ИДСтроки = Сч;
				НовСтрокаНачисление.ВидНачисленияСтр = СокрЛП(Лист.Cells(НачалоДанных,НомерКолонки).Text);
				Если НовСтрокаНачисление.ВидНачисленияСтр = "" Тогда
					НовСтрокаНачисление.ВидНачисленияСтр = СокрЛП(Лист.Cells(НачалоДанных+1,НомерКолонки).Text);
				КонецЕсли;
				Если СтрНайти(НовСтрокаНачисление.ВидНачисленияСтр, "Районный коэф") > 0 Тогда//или СтрНайти(НовСтрокаНачисление.ВидНачисленияСтр, "Северная над") > 0 Тогда
					НовСтрокаНачисление.Значение = Лист.Cells(Сч,НомерКолонки).Value + 1;
				Иначе
				    НовСтрокаНачисление.Значение = Лист.Cells(Сч,НомерКолонки).Value;
					
					Если СтрНайти(НовСтрокаНачисление.ВидНачисленияСтр, "Северная надбавка") = 0 
						И ТЗДляВводаВидовНачислений.НайтиСтроки(Новый Структура("ВидНачисленияСтр", НовСтрокаНачисление.ВидНачисленияСтр)).Количество() = 0 Тогда
						ТЗДляВводаВидовНачислений.Добавить().ВидНачисленияСтр = НовСтрокаНачисление.ВидНачисленияСтр;
					КонецЕсли;	
				
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;	
		//Оклад=Лист.Cells(Сч,5).Value;
		//НовСтрТЗ.Оклад = Оклад;
		//ТарифнаяСтавка=Лист.Cells(Сч,6).Value;
		//НовСтрТЗ.ТарифнаяСтавка = ТарифнаяСтавка;
		//ПремияПроцент=Лист.Cells(Сч,7).Value;
		//НовСтрТЗ.ПремияПроцент = ПремияПроцент;
		//ПремияСумма=Лист.Cells(Сч,8).Value;
		//НовСтрТЗ.ПремияСумма = ПремияСумма;
		//НадбавкаЗаВахту=Лист.Cells(Сч,9).Value;
		//НовСтрТЗ.НадбавкаЗаВахту = НадбавкаЗаВахту;
		//РайонныйКоэффициент=Лист.Cells(Сч,10).Value;
		//НовСтрТЗ.РайонныйКоэффициент = РайонныйКоэффициент;
		//СевернаяНадбавка=Лист.Cells(Сч,11).Value;
		//НовСтрТЗ.СевернаяНадбавка = СевернаяНадбавка;
		
	КонецЦикла;
	
	XLSОбъект.Application.Quit();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСправочники(ОбъектЗаполнения = Неопределено, СообщенияВсе = Неопределено)
	//третий этап - распознование справочников подразделений и должностей
	Запрос = Новый Запрос;
	//поиск подразделений по наименованию с учетом организации и родителя, если заполнен.
	//поиск должности по наименованию
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ТЗ.ПодразделениеСтр КАК ПодразделениеСтр,
	               |	ТЗ.УчастокСтр КАК УчастокСтр,
	               |	ТЗ.ДолжностьСтр КАК ДолжностьСтр
	               |ПОМЕСТИТЬ ВТизТЗ
	               |ИЗ
	               |	&ТЗ КАК ТЗ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               //|	ВТизТЗ.ПодразделениеСтр КАК ПодразделениеСтр,
	               |	ВТизТЗ.УчастокСтр КАК УчастокСтр,
	               |	ВТизТЗ.ДолжностьСтр КАК ДолжностьСтр,
	               |	ПодразделенияОрганизаций.Ссылка КАК Подразделение,
	               |	Должности.Ссылка КАК Должность
	               |ИЗ
	               |	ВТизТЗ КАК ВТизТЗ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	               |		ПО ВТизТЗ.УчастокСтр = ПодразделенияОрганизаций.Наименование
				   |		И ВЫБОР КОГДА ВТизТЗ.УчастокСтр = ВТизТЗ.ПодразделениеСтр ТОГДА ИСТИНА ИНАЧЕ ВТизТЗ.ПодразделениеСтр = ПодразделенияОрганизаций.Родитель.Наименование КОНЕЦ
				   |		И ПодразделенияОрганизаций.Владелец = &Организация
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Должности КАК Должности
	               |		ПО ВТизТЗ.ДолжностьСтр = Должности.Наименование";
	Запрос.УстановитьПараметр("ТЗ", ТЗизФайла.Выгрузить(,"ПодразделениеСтр,УчастокСтр,ДолжностьСтр"));
	Запрос.УстановитьПараметр("Организация", ОбъектЗаполнения.Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Подразделение) Тогда
			Строки = ТЗизФайла.НайтиСтроки(Новый Структура("УчастокСтр", Выборка.УчастокСтр));
			Для каждого Стр Из Строки Цикл
				Стр.Участок = Выборка.Подразделение;
			КонецЦикла;	
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.Должность) Тогда
			Строки = ТЗизФайла.НайтиСтроки(Новый Структура("ДолжностьСтр", Выборка.ДолжностьСтр));
			Для каждого Стр Из Строки Цикл
				Стр.Должность = Выборка.Должность;
			КонецЦикла;	
		КонецЕсли;
	КонецЦикла;	
	
	ВидРайонныйКоэффициент = ПланыВидовРасчета.Начисления.НачислениеРайонныйКоэффициент();	
	НачислениеРайонныйКоэффициент = ВидРайонныйКоэффициент;
	//ВидРайонныйКоэффициент = ПланыВидовРасчета.Начисления.НайтиПоНаименованию("Районный коэффициент", Истина);
	Если НЕ ЗначениеЗаполнено(ВидРайонныйКоэффициент) Тогда
		СтрРайон = ТЗДляВводаВидовНачислений.НайтиСтроки(Новый Структура("ВидНачисленияСтр", "Районный коэффициент"));
		Если СтрРайон.Количество() > 0 Тогда
			ВидРайонныйКоэффициент = СтрРайон[0].ВидНачисления;
		КонецЕсли;	
	КонецЕсли;
	СтрРайон = ТЗДляВводаВидовНачислений.Добавить();
	СтрРайон.ВидНачисления = ВидРайонныйКоэффициент;
	СтрРайон.ВидНачисленияСтр = "Районный коэффициент";
	ВидСевернаяНадбавка = ПланыВидовРасчета.Начисления.НачислениеСевернаяНадбавка();
	НачислениеСевернаяНадбавка = ВидСевернаяНадбавка;
	//ВидСевернаяНадбавка =    ПланыВидовРасчета.Начисления.НайтиПоНаименованию("Северная надбавка", Истина);
	Если НЕ ЗначениеЗаполнено(ВидСевернаяНадбавка) Тогда
		СтрСевер = ТЗДляВводаВидовНачислений.НайтиСтроки(Новый Структура("ВидНачисленияСтр", "Северная надбавка"));
		Если СтрСевер.Количество() > 0 Тогда
			ВидСевернаяНадбавка = СтрСевер[0].ВидНачисления;
		КонецЕсли;	
	КонецЕсли;
	СтрСевер = ТЗДляВводаВидовНачислений.Добавить();
	СтрСевер.ВидНачисления = ВидСевернаяНадбавка;
	СтрСевер.ВидНачисленияСтр = "Северная надбавка";
	Запрос.Текст = "ВЫБРАТЬ
	               |	НачисленияПоказатели.Ссылка КАК Ссылка,
	               |	НачисленияПоказатели.Показатель КАК Показатель
	               |ИЗ
	               |	ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
	               |ГДЕ
	               |	НачисленияПоказатели.Ссылка В(&ВидыНачислений)
	               |	И НачисленияПоказатели.Показатель.Идентификатор <> ""РасчетнаяБаза""
	               |			И (НачисленияПоказатели.ЗапрашиватьПриВводе
	               |				ИЛИ НачисленияПоказатели.ОсновнойПоказатель)";
				   //|				ИЛИ НачисленияПоказатели.ИспользоватьПриРасчете)";
	Запрос.УстановитьПараметр("ВидыНачислений", ТЗДляВводаВидовНачислений.Выгрузить(,"ВидНачисления").ВыгрузитьКолонку("ВидНачисления"));
	ТЗПоказателей = Запрос.Выполнить().Выгрузить();
	СтрСевер = ТЗПоказателей.Добавить();
	СтрСевер.Ссылка = ВидСевернаяНадбавка;//ПланыВидовРасчета.Начисления.НайтиПоНаименованию("Северная надбавка");
	СтрСевер.Показатель = Справочники.ПоказателиРасчетаЗарплаты.СевернаяНадбавка;
	
	Для каждого СтрВидНачисления из ТЗДляВводаВидовНачислений Цикл
		СтрокиОсновногоТЗ = ТЗВидыНачислений.НайтиСтроки(Новый Структура("ВидНачисленияСтр", СтрВидНачисления.ВидНачисленияСтр));
		Для каждого СтрокаОсновногоТЗ Из СтрокиОсновногоТЗ Цикл
			СтрокаОсновногоТЗ.ВидНачисления = СтрВидНачисления.ВидНачисления;
			СтрПоказатель = ТЗПоказателей.Найти(СтрВидНачисления.ВидНачисления);
			Если СтрПоказатель <> Неопределено Тогда 
				СтрокаОсновногоТЗ.Показатель = СтрПоказатель.Показатель;
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;
	
	//четвертый этап - этап заполнения документа:
	Если ОбъектЗаполнения <> Неопределено Тогда
		ЗаполнитьРасчетныеРеквизиты(ОбъектЗаполнения, СообщенияВсе);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСправочникиКл(Команда)
	ЗаполнитьСправочники();
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	
	Если ВладелецФормы = Неопределено тогда		
		Окна = ПолучитьОкна();
		Для каждого Окн из Окна Цикл
			Если Найти(Окн.Заголовок, "Утверждение") Тогда
				Форма = Окн.Содержимое.Получить(0);
				НовыйОбъект = Форма.Объект;
				Прервать;
			КонецЕсли;	
		КонецЦикла;		
	Иначе	
		Форма = ВладелецФормы;
		НовыйОбъект = Форма.Объект;
	КонецЕсли;	
	
	//Второй этап - ввод видов начислений. Пользователь вводит вручную.
	
	СообщенияВсе = новый Соответствие;
	ЗаполнитьСправочники(НовыйОбъект, СообщенияВсе);
	
	КопироватьДанныеФормы(НовыйОбъект, Форма.Объект);
	Если СтрНайти(Форма.Заголовок, "Утверждение")> 0 Тогда
		Форма.ИтогоФОТПоПозиции = НовыйОбъект.Позиции.Итог("ФОТПоПозиции");
		Форма.ИтогоФОТПоПозицииМин = НовыйОбъект.Позиции.Итог("ФОТПоПозицииМин");
		Форма.ИтогоФОТПоПозицииМакс = НовыйОбъект.Позиции.Итог("ФОТПоПозицииМакс");
	КонецЕсли;

	Форма.ОбновитьОтображениеДанных();
	Форма.Модифицированность = истина;
	//КопироватьДанныеФормы(НовыйОбъект.Серии, ВладелецФормы.Объект.Серии);
	
	Для каждого КлЗн Из СообщенияВсе Цикл
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = КлЗн.Ключ;
		Сообщение.УстановитьДанные(КлЗн.Значение);
		Сообщение.КлючДанных = КлЗн.Значение;
		Сообщение.ИдентификаторНазначения = Форма.УникальныйИдентификатор;
		Сообщение.Сообщить();
	КонецЦикла;
	Закрыть();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРасчетныеРеквизиты(ОбъектЗаполнения, СообщенияВсе)
	Объект.Ссылка = ОбъектЗаполнения;
	ДоступноЧтениеНачисленийШтатногоРасписания = Истина;
	//МассивСообщенийСН = новый массив;
	//МассивСообщенийРК = Новый Массив;
	СообщенияВсе = Новый Соответствие;
	Для Каждого СтрТЗ Из ТЗизФайла Цикл
		НоваяСтрокаПозиции = ОбъектЗаполнения.Позиции.Добавить();
		ИдентификаторТекущейПозиции = НоваяСтрокаПозиции.ПолучитьИдентификатор() + 1;
		НоваяСтрокаПозиции.Подразделение = СтрТз.Участок;
		НоваяСтрокаПозиции.Должность = СтрТз.Должность;
		НоваяСтрокаПозиции.КоличествоСтавок = СтрТз.КоличествоЕд;
		//НоваяСтрокаПозиции.ИдентификаторСтрокиПозиции = -1;//ИдентификаторТекущейПозиции;//пока не заполнять
		НоваяСтрокаПозиции.Действие = ПредопределенноеЗначение("Перечисление.ДействияСПозициямиШтатногоРасписания.СоздатьНовуюПозицию");
		НоваяСтрокаПозиции.Наименование = УправлениеШтатнымРасписаниемКлиентСервер.НаименованиеПозицииШтатногоРасписания(НоваяСтрокаПозиции.Подразделение, НоваяСтрокаПозиции.Должность);
		
		Объект.Начисления.Очистить(); //это промежуточные таблицы на этапе заполнения документа
		Объект.Показатели.Очистить(); //это промежуточные таблицы на этапе заполнения документа
		СтрокиВидыНачисления = ТЗВидыНачислений.НайтиСтроки(Новый Структура("ИДСтроки", СтрТЗ.ИДСтроки));
		Для Каждого СтрокаВидаНачисления Из СтрокиВидыНачисления Цикл 
			Если СтрокаВидаНачисления.ВидНачисления = ВидРайонныйКоэффициент Тогда
				НоваяСтрокаПозиции.РайонныйКоэффициентРазмер = СтрокаВидаНачисления.Значение;
				НоваяСтрокаПозиции.РайонныйКоэффициент = СтрокаВидаНачисления.Значение;
				//Проверка рай коэф с файлом. Если не соответствует, то выводим сообщение.
				Если СтрТз.Участок.РайонныйКоэффициент <> СтрокаВидаНачисления.Значение Тогда
					Текст = "У подразделения " + СтрТз.УчастокСтр + " районный коэффициент("+СтрТз.Участок.РайонныйКоэффициент+") не равно значению из файла(" + СтрокаВидаНачисления.Значение+")";
					СообщенияВсе.Вставить(текст, СтрТз.Участок);
					
					//Если МассивСообщенийРК.Найти(СтрТз.Участок) = Неопределено Тогда												
					//	Сообщение = Новый СообщениеПользователю;
					//	Сообщение.ИдентификаторНазначения = ВладелецФормы.УникальныйИдентификатор; недоступно
					//	Сообщение.Текст = "У подразделения " + СтрТз.УчастокСтр + " районный коэффициент("+СтрТз.Участок.РайонныйКоэффициент+") не равно значению из файла(" + СтрокаВидаНачисления.Значение+")";
					//	Сообщение.УстановитьДанные(СтрТз.Участок);
					//	Сообщение.КлючДанных = СтрТз.Участок;
					//	Сообщение.Сообщить();
					//	МассивСообщенийРК.Добавить(СтрТз.Участок);
					//КонецЕсли;
				КонецЕсли;
			ИначеЕсли СтрокаВидаНачисления.ВидНачисления = ВидСевернаяНадбавка Тогда
				НоваяСтрокаПозиции.СевернаяНадбавкаРазмер = СтрокаВидаНачисления.Значение * 100;
				НоваяСтрокаПозиции.ПроцентСевернойНадбавки = СтрокаВидаНачисления.Значение * 100;
				//Проверка сев надб с файлом. Если не соответствует, то выводим сообщение.
				Если СтрТз.Участок.ПроцентСевернойНадбавки <> СтрокаВидаНачисления.Значение*100 Тогда
					Текст = "У подразделения " + СтрТз.УчастокСтр + " северная надбавка("+СтрТз.Участок.ПроцентСевернойНадбавки+") не равно значению из файла(" + (СтрокаВидаНачисления.Значение*100)+")";
					СообщенияВсе.Вставить(текст, СтрТз.Участок);
					
					//Если МассивСообщенийСН.Найти(СтрТз.Участок) = Неопределено Тогда
					//	Сообщение = Новый СообщениеПользователю;
					//	Сообщение.ИдентификаторНазначения = ВладелецФормы.УникальныйИдентификатор;
					//	Сообщение.Текст = "У подразделения " + СтрТз.УчастокСтр + " северная надбавка("+СтрТз.Участок.ПроцентСевернойНадбавки+") не равно значению из файла(" + (СтрокаВидаНачисления.Значение*100)+")";
					//	Сообщение.УстановитьДанные(СтрТз.Участок);
					//	Сообщение.КлючДанных = СтрТз.Участок;
					//	Сообщение.Сообщить();
					//	МассивСообщенийСН.Добавить(СтрТз.Участок);
					//КонецЕсли;
				КонецЕсли;	
			Иначе			
			
				НоваяСтрокаНачисления = Объект.Начисления.Добавить();
				//НоваяСтрокаНачисления.ИдентификаторСтрокиПозиции = ИдентификаторТекущейПозиции; //пока не заполнять
				НоваяСтрокаНачисления.ИдентификаторСтрокиВидаРасчета = НоваяСтрокаНачисления.ПолучитьИдентификатор();
				НоваяСтрокаНачисления.Действие = ПредопределенноеЗначение("Перечисление.ДействияСНачислениямиИУдержаниями.Утвердить");
				//НоваяСтрокаНачисления.ИдентификаторСтрокиПозиции = -1;
				//ВидыНачислений = ТЗДляВводаВидовНачислений.НайтиСтроки(Новый Структура("ВидНачисленияСтр", СтрокаВидаНачисления.ВидНачисленияСтр));
				НоваяСтрокаНачисления.Начисление = СтрокаВидаНачисления.ВидНачисления;
				НоваяСтрокаНачисления.Размер = СтрокаВидаНачисления.Значение;
				НоваяСтрокаНачисления.РазмерМин = СтрокаВидаНачисления.Значение;
				НоваяСтрокаНачисления.РазмерМакс = СтрокаВидаНачисления.Значение;
				//ЗаполнитьЗначенияСвойств(Начисления.Добавить(), НоваяСтрокаНачисления);
				НоваяСтрокаНачисления.Показатель1 = СтрокаВидаНачисления.Показатель;
				НоваяСтрокаНачисления.Значение1 = СтрокаВидаНачисления.Значение;
				НоваяСтрокаНачисления.МинимальноеЗначение1 = СтрокаВидаНачисления.Значение;
				НоваяСтрокаНачисления.МаксимальноеЗначение1 = СтрокаВидаНачисления.Значение;
				
				НоваяСтрокаПоказатель = Объект.Показатели.Добавить();
				НоваяСтрокаПоказатель.ИдентификаторСтрокиВидаРасчета = НоваяСтрокаНачисления.ИдентификаторСтрокиВидаРасчета;
				НоваяСтрокаПоказатель.Показатель = СтрокаВидаНачисления.Показатель;
				//НоваяСтрокаПоказатель.ИдентификаторСтрокиПозиции = -1;//ИдентификаторТекущейПозиции; \\пока не заполнять...
				НоваяСтрокаПоказатель.Значение = СтрокаВидаНачисления.Значение;
				НоваяСтрокаПоказатель.ЗначениеМин = СтрокаВидаНачисления.Значение;
				НоваяСтрокаПоказатель.ЗначениеМакс = СтрокаВидаНачисления.Значение;
			КонецЕсли;
		КонецЦикла;
		
		УправлениеШтатнымРасписанием.РассчитатьФОТВФормеСОднойПозицией(ЭтотОбъект, НоваяСтрокаПозиции, ОбъектЗаполнения.Организация, ТекущаяДатаСеанса(), ОписаниеТаблицыНачисленийНаСервере());
		
		НоваяСтрокаПозиции.ИдентификаторСтрокиПозиции = ИдентификаторТекущейПозиции;
		Для каждого СтрНачисление из Объект.Начисления Цикл
			НовСтрокаНачисление = ОбъектЗаполнения.Начисления.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрокаНачисление, СтрНачисление);
			НовСтрокаНачисление.ИдентификаторСтрокиПозиции = ИдентификаторТекущейПозиции;
		КонецЦикла;
		Для каждого СтрПоказатель из Объект.Показатели Цикл
			НовСтрокаПоказатель = ОбъектЗаполнения.Показатели.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрокаПоказатель, СтрПоказатель);
			НовСтрокаПоказатель.ИдентификаторСтрокиПозиции = ИдентификаторТекущейПозиции; 
		КонецЦикла;
		
		//ДанныеТекущейПозиции = Объект.Позиции.НайтиПоИдентификатору(ИдентификаторСтроки);
		ДанныеНачислений = ОбъектЗаполнения.Начисления.Выгрузить(Новый Структура("ИдентификаторСтрокиПозиции", НоваяСтрокаПозиции.ИдентификаторСтрокиПозиции));
		РассчитатьИтогиФОТПоПозиции(НоваяСтрокаПозиции, ДанныеНачислений, ОписаниеТаблицыНачисленийНаСервере());
		НоваяСтрокаПозиции.ФОТПоПозиции = НоваяСтрокаПозиции.ФОТ;
		//Если НоваяСтрокаПозиции.Свойство("Комментарий") Тогда		
		//	НоваяСтрокаПозиции.Комментарий = УправлениеШтатнымРасписаниемКлиентСервер.ПолучитьКомментарийКДействиюСПозициейШР(
		//		НоваяСтрокаПозиции, ЭтотОбъект);		
		//КонецЕсли;
	
		
	КонецЦикла;

	//УправлениеШтатнымРасписаниемФормы.ЗаполнитьИтоговыйФОТПоПозициям(ЭтотОбъект, ОбъектЗаполнения.Позиции);
	
КонецПроцедуры	

&НаСервере
Функция ОписаниеТаблицыНачисленийНаСервере()
	ОписаниеТаблицыВидовРасчета = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыПлановыхНачислений();
	ОписаниеТаблицыВидовРасчета.ИмяРеквизитаДокументОснование = "";
	//ОписаниеТаблицыВидовРасчета.ПутьКДанным = "Объект.Начисления";
	//ОписаниеТаблицыВидовРасчета.ПутьКДаннымПоказателей = "Объект.Показатели";
	Возврат ОписаниеТаблицыВидовРасчета;
КонецФункции	

&НаСервере
Процедура РассчитатьИтогиФОТПоПозиции(ДанныеТекущейПозиции, ТаблицаНачислений, ОписаниеТаблицыНачислений) Экспорт
	
	ФОИспользоватьВилкуСтавокВШтатномРасписании = ПолучитьФункциональнуюОпциюФормы("ИспользоватьВилкуСтавокВШтатномРасписании");
	
	Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
		
		ДанныеТекущейПозиции.ФОТМин =
			ИтогФОТПоРеквизиту(ТаблицаНачислений, "РазмерМин")
			+ ДанныеТекущейПозиции.НадбавкаЗаВредностьРазмерМин
			+ ДанныеТекущейПозиции.РайонныйКоэффициентРазмерМин
			+ ДанныеТекущейПозиции.СевернаяНадбавкаРазмерМин;
		
		ДанныеТекущейПозиции.ФОТМакс =
			ИтогФОТПоРеквизиту(ТаблицаНачислений, "РазмерМакс")
			+ ДанныеТекущейПозиции.НадбавкаЗаВредностьРазмерМакс
			+ ДанныеТекущейПозиции.РайонныйКоэффициентРазмерМакс
			+ ДанныеТекущейПозиции.СевернаяНадбавкаРазмерМакс;
		
		ДанныеТекущейПозиции.ФОТ = ДанныеТекущейПозиции.ФОТМакс;
		
	Иначе
		
		ДанныеТекущейПозиции.ФОТ =
			ИтогФОТПоРеквизиту(ТаблицаНачислений, "Размер")
			+ ДанныеТекущейПозиции.НадбавкаЗаВредностьРазмер
			+ ДанныеТекущейПозиции.РайонныйКоэффициентРазмер
			+ ДанныеТекущейПозиции.СевернаяНадбавкаРазмер;
		
		ДанныеТекущейПозиции.ФОТМин = ДанныеТекущейПозиции.ФОТ;
		ДанныеТекущейПозиции.ФОТМакс = ДанныеТекущейПозиции.ФОТ;
		
	КонецЕсли;
	
	Если ДанныеТекущейПозиции.Свойство("Комментарий") Тогда
		
		ДанныеТекущейПозиции.Комментарий = УправлениеШтатнымРасписаниемКлиентСервер.ПолучитьКомментарийКДействиюСПозициейШР(
			ДанныеТекущейПозиции, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИтогФОТПоРеквизиту(ТаблицаНачислений, ИмяРеквизита)
	
	ИтогФОТ = 0;
	
	Для каждого СтрокаТаблицаНачислений Из ТаблицаНачислений Цикл
		
		Если ТипЗнч(ТаблицаНачислений) = Тип("ТаблицаЗначений") Тогда
			Если ТаблицаНачислений.Колонки.Найти("Действие") <> Неопределено
				И СтрокаТаблицаНачислений.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить Тогда
				Продолжить;
			КонецЕсли; 
		Иначе
			Если СтрокаТаблицаНачислений.Свойство("Действие")
				И СтрокаТаблицаНачислений.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли;
		
		ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаТаблицаНачислений.Начисление);
		Если ВидРасчетаИнфо.ВключатьВФОТ Тогда
			ИтогФОТ = ИтогФОТ + СтрокаТаблицаНачислений[ИмяРеквизита];
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИтогФОТ;
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//ПараметрыПомещения = Новый Структура("ОбъектыНазначения", ОбъектыНазначения);
	//ПараметрыПомещения = Новый Структура;
	//ОбработкаОкончанияПомещения = Новый ОписаниеОповещения("ОбработчикОкончанияПомещения", ЭтотОбъект, ПараметрыПомещения); обращение к серверу не требуется.
	Если НЕ ВладелецФормы = Неопределено тогда
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Диалог.Фильтр = "Файлы Excel (*.xls*)|*.xls*";//|Файлы Excel (*.xls)|*.xls";
		Если Диалог.Выбрать() Тогда
			СтрИмяФайла = Диалог.ПолноеИмяФайла;
		КонецЕсли;	
		Загрузка();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтрИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Фильтр = "Файлы Excel (*.xls*)|*.xls*";//|Файлы Excel (*.xls)|*.xls";
	Если Диалог.Выбрать() Тогда
		СтрИмяФайла = Диалог.ПолноеИмяФайла;
	КонецЕсли;
КонецПроцедуры

//&НаСервере
//Процедура РассчитатьФОТВФормеСОднойПозицией(Форма, ДанныеПозиции, Знач Организация, Знач ДатаРасчета, Знач ОписаниеТаблицыВидовРасчета, СохранитьИтоговыеЗначения = Истина) Экспорт
//	
//	Если НЕ ЗначениеЗаполнено(ДатаРасчета) Тогда
//		ДатаРасчета = ТекущаяДатаСеанса();
//	КонецЕсли; 
//	
//	КоллекцияПозиций = ПустаяТаблицаКоллекцииПозицийДляРасчетаФОТ();
//	КоллекцияНачислений = ПустаяТаблицаКоллекцииНачисленийДляРасчетаФОТ();
//	КоллекцияПоказателей = ПустаяТаблицаКоллекцииПоказателейДляРасчетаФОТ();
//	
//	ПересчетТолькоЗависимыхНачислений = Ложь;
//	Если Форма.НачисленияФиксРасчет <> Неопределено Тогда
//		
//		СоответствиеФиксРасчет = Новый Соответствие(Форма.НачисленияФиксРасчет);
//		ПересчетТолькоЗависимыхНачислений = СоответствиеФиксРасчет.Количество() > 0;
//		
//	КонецЕсли; 
//	
//	ЗаполнитьЗначенияСвойств(КоллекцияПозиций.Добавить(), ДанныеПозиции);
//	
//	// Начисления с показателями
//	МаксимальноеКоличествоПоказателей = ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыВидовРасчета);
//	ДанныеНачислений = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицыВидовРасчета.ПутьКДанным);
//	
//	МассивНачислений = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеНачислений, "Начисление", Истина);
//	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(МассивНачислений, ПланыВидовРасчета.Начисления.ПустаяСсылка());
//	
//	Для каждого СтрокаНачислений Из ДанныеНачислений Цикл
//		
//		Если СтрокаНачислений.Свойство("Действие")
//			И СтрокаНачислений.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить Тогда
//			Продолжить;
//		КонецЕсли; 
//		
//		Если Не ЗначениеЗаполнено(СтрокаНачислений.Начисление) Тогда
//			Продолжить;
//		КонецЕсли; 
//		
//		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
//			
//			МодульУправленческаяЗарплатаФормы = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплатаФормы");
//			Если МодульУправленческаяЗарплатаФормы.НачислениеДополняетФОТРегламентированныхНачислений(Форма, СтрокаНачислений.Начисление) Тогда
//				Продолжить;
//			КонецЕсли;
//			
//		КонецЕсли;
//		
//		ИнфоОВидеРасчета = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаНачислений.Начисление);
//		
//		Если ИнфоОВидеРасчета.Рассчитывается Тогда
//			Размер = СтрокаНачислений.Размер;
//			РазмерМин = СтрокаНачислений.РазмерМин;
//			РазмерМакс = СтрокаНачислений.РазмерМакс;
//		Иначе
//			Если СтрокаНачислений.Свойство("Значение1") Тогда
//				Размер = СтрокаНачислений.Значение1;
//				РазмерМин = СтрокаНачислений.Значение1;
//				РазмерМакс = СтрокаНачислений.Значение1;
//			ИначеЕсли СтрокаНачислений.Свойство("МинимальноеЗначение1") И СтрокаНачислений.Свойство("МаксимальноеЗначение1") Тогда 
//				Размер = СтрокаНачислений.МаксимальноеЗначение1;
//				РазмерМин = СтрокаНачислений.МинимальноеЗначение1;
//				РазмерМакс = СтрокаНачислений.МаксимальноеЗначение1;
//			КонецЕсли;
//		КонецЕсли;
//		
//		ОписаниеНачисления = КоллекцияНачислений.Добавить();
//		ЗаполнитьЗначенияСвойств(ОписаниеНачисления, СтрокаНачислений);
//		
//		ОписаниеНачисления.Размер = Размер;
//		ОписаниеНачисления.РазмерМин = РазмерМин;
//		ОписаниеНачисления.РазмерМакс = РазмерМакс;
//		
//		Если ПересчетТолькоЗависимыхНачислений
//			И (СоответствиеФиксРасчет.Получить(СтрокаНачислений.Начисление) = Истина
//				ИЛИ Не ИнфоОВидеРасчета.ТребуетсяРасчетБазы) Тогда
//				
//			ОписаниеНачисления.ФиксРасчет = Истина;
//			
//		КонецЕсли; 
//		
//		Для НомерПоказателя = 1 По МаксимальноеКоличествоПоказателей Цикл
//			
//			Показатель = СтрокаНачислений["Показатель" + НомерПоказателя];
//			Если НЕ ЗначениеЗаполнено(Показатель) Тогда
//				Прервать;
//			КонецЕсли; 
//			
//			ОписаниеПоказателя = КоллекцияПоказателей.Добавить();
//			ОписаниеПоказателя.ИдентификаторСтрокиВидаРасчета = ОписаниеНачисления.ИдентификаторСтрокиВидаРасчета;
//			ОписаниеПоказателя.Показатель = Показатель;
//			
//			ПутьКЗначению = "Значение" + НомерПоказателя;
//			Если СтрокаНачислений.Свойство(ПутьКЗначению) Тогда
//				ОписаниеПоказателя.Значение = СтрокаНачислений[ПутьКЗначению];
//			КонецЕсли; 
//			
//			ПутьКЗначению = "МинимальноеЗначение" + НомерПоказателя;
//			Если СтрокаНачислений.Свойство(ПутьКЗначению) Тогда
//				ОписаниеПоказателя.ЗначениеМин = СтрокаНачислений[ПутьКЗначению];
//			КонецЕсли; 
//			
//			ПутьКЗначению = "МаксимальноеЗначение" + НомерПоказателя;
//			Если СтрокаНачислений.Свойство(ПутьКЗначению) Тогда
//				ОписаниеПоказателя.ЗначениеМакс = СтрокаНачислений[ПутьКЗначению];
//			КонецЕсли; 
//			
//		КонецЦикла;
//		
//	КонецЦикла;
//	
//	// Доп. тарифы коэффициенты
//	ДанныеПоказателей = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицыВидовРасчета.ПутьКДаннымПоказателей);
//	СтрокиДопПоказателей = ДанныеПоказателей.НайтиСтроки(Новый Структура("ИдентификаторСтрокиВидаРасчета", 0));
//	Для каждого СтрокаПоказателя Из СтрокиДопПоказателей Цикл
//		
//		ОписаниеПоказателя = КоллекцияПоказателей.Добавить();
//		ОписаниеПоказателя.ИдентификаторСтрокиВидаРасчета = 0;
//		ОписаниеПоказателя.Показатель = СтрокаПоказателя.Показатель;
//			
//		ПутьКЗначению = "Значение";
//		Если СтрокаПоказателя.Свойство(ПутьКЗначению) Тогда
//			ОписаниеПоказателя.Значение = СтрокаПоказателя[ПутьКЗначению];
//		КонецЕсли; 
//		
//		ПутьКЗначению = "ЗначениеМин";
//		Если СтрокаПоказателя.Свойство(ПутьКЗначению) Тогда
//			ОписаниеПоказателя.ЗначениеМин = СтрокаПоказателя[ПутьКЗначению];
//		КонецЕсли; 
//		
//		ПутьКЗначению = "ЗначениеМакс";
//		Если СтрокаПоказателя.Свойство(ПутьКЗначению) Тогда
//			ОписаниеПоказателя.ЗначениеМакс = СтрокаПоказателя[ПутьКЗначению];
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	ОписаниеПозиций = Новый Структура;
//	ОписаниеПозиций.Вставить("Организация", Организация);
//	ОписаниеПозиций.Вставить("ДатаВступленияВСилу", ДатаРасчета);
//	ОписаниеПозиций.Вставить("Позиции", КоллекцияПозиций);
//	ОписаниеПозиций.Вставить("Начисления", КоллекцияНачислений);
//	ОписаниеПозиций.Вставить("Показатели", КоллекцияПоказателей);
//	
//	РассчитатьФОТНесколькихПозиций(ОписаниеПозиций);
//	
//	Если СохранитьИтоговыеЗначения Тогда
//		ЗаполнитьЗначенияСвойств(ДанныеПозиции, ОписаниеПозиций.Позиции[0], СвойстваПозицииСРезультатамиРасчетаФОТ());
//	КонецЕсли;
//	
//	Для каждого РассчитанноеНачисление Из ОписаниеПозиций.Начисления Цикл
//		
//		СтрокиНачислений = ДанныеНачислений.НайтиСтроки(Новый Структура("Начисление", РассчитанноеНачисление.Начисление));
//		Для каждого СтрокаНачислений Из СтрокиНачислений Цикл
//			ЗаполнитьЗначенияСвойств(СтрокаНачислений, РассчитанноеНачисление, "Размер,РазмерМин,РазмерМакс");
//		КонецЦикла;
//		
//	КонецЦикла;
//	
//	Форма.НачисленияФиксРасчет = Неопределено;
//	
//КонецПроцедуры

