&НаКлиенте
Процедура ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначения) Экспорт
	//Сообщить(ИдентификаторКоманды);
	//Для каждого Элемент из ОбъектыНазначения Цикл
	//     Сообщить(Элемент);    
	// КонецЦикла;
	Если ОбъектыНазначения.Количество() > 0 Тогда
		//ПараметрыПомещения = Новый Структура("ОбъектыНазначения", ОбъектыНазначения);
		
		//ОбработкаОкончанияПомещения = Новый ОписаниеОповещения("ОбработчикОкончанияПомещения", ЭтотОбъект, ПараметрыПомещения);
	
    	//НачатьПомещениеФайла(ОбработкаОкончанияПомещения, , , Истина, ЭтотОбъект.УникальныйИдентификатор);
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Если Диалог.Выбрать() Тогда
			СтрИмяФайла = Диалог.ПолноеИмяФайла;
			Загрузка();
			ЗаполнитьСправочники();
			
			Форма = ВладелецФормы;//ОткрытьФорму(ИмяФормыВладельца,КлючПоиска,,,Окн);				
			НовыйОбъект = Форма.Объект;
			
			Для Каждого СтрТЗ Из ТЗизФайла Цикл
				НоваяСтрокаПозиции = Форма.Объект.Позиции.Добавить();
				ИдентификаторТекущейПозиции = НоваяСтрокаПозиции.ПолучитьИдентификатор();
				//Элемент.ТекущаяСтрока = ИдентификаторТекущейПозиции;
				НоваяСтрокаПозиции.Подразделение = СтрТз.Участок;
				НоваяСтрокаПозиции.Должность = СтрТз.Должность;
				НоваяСтрокаПозиции.КоличествоСтавок = СтрТз.КоличествоЕд;
				НоваяСтрокаПозиции.ОкладТариф = СтрТз.Оклад;
				НоваяСтрокаПозиции.ОкладТарифМин = СтрТз.Оклад;
				НоваяСтрокаПозиции.ОкладТарифМакс = СтрТз.Оклад;
				//НоваяСтрокаПозиции.
				УправлениеШтатнымРасписаниемКлиент.ПозицииПриНачалеРедактирования(Форма, Форма.Объект.Позиции, ИдентификаторТекущейПозиции, Истина, Ложь);
				//НоваяСтрокаПозиции.Подразделение = 
				//ОткрытьДанныеПозиции(ИдентификаторТекущейПозиции);
				
			КонецЦикла;	
			
			//Сообщить(НовыйОбъект.Серии.Количество());
			КопироватьДанныеФормы(НовыйОбъект, Форма.Объект);
			//Сообщить(Форма.Объект.Разделы.Количество());
			Форма.ОбновитьОтображениеДанных();
			Форма.Модифицированность = истина;
			//КопироватьДанныеФормы(НовыйОбъект.Серии, ВладелецФормы.Объект.Серии);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОкончанияПомещения(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
    Если Результат Тогда
		//Сообщить(Адрес);
		Сообщения = Новый массив;
		Если ЭтоАдресВременногоХранилища(Адрес) Тогда
			ОбъектыНазначения = ДополнительныеПараметры.ОбъектыНазначения;
			Если ОбъектыНазначения.Количество()>0 Тогда
				Элемент = ОбъектыНазначения[0];
				КлючПоиска = Новый Структура("Ключ", Элемент);
				
				Окна = ПолучитьОкна();
				Для каждого Окн из Окна Цикл
					Если НЕ Окн.Основное И Найти(Окн.Заголовок, Элемент) Тогда
						Форма = ВладелецФормы;//ОткрытьФорму(ИмяФормыВладельца,КлючПоиска,,,Окн);
						
						НовыйОбъект = Форма.Объект;
						Отказ = Ложь;
						
						//Загрузить(ЭтаФорма.Команды.Найти("Загрузить"), НовыйОбъект);
						//ЗагрузкаНаСервере(Адрес, ВыбранноеИмяФайла, НовыйОбъект, Отказ, Сообщения);
						Загрузка();
						Для Каждого СтрТЗ Из ТЗизФайла Цикл
							НоваяСтрокаПозиции = Форма.Объект.Позиции.Добавить();
							ИдентификаторТекущейПозиции = НоваяСтрокаПозиции.ПолучитьИдентификатор();
							//Элемент.ТекущаяСтрока = ИдентификаторТекущейПозиции;
							
							УправлениеШтатнымРасписаниемКлиент.ПозицииПриНачалеРедактирования(Форма, Форма.Объект.Позиции, ИдентификаторТекущейПозиции, Истина, Ложь);
							//НоваяСтрокаПозиции.Подразделение = 
							//ОткрытьДанныеПозиции(ИдентификаторТекущейПозиции);
							
						КонецЦикла;	
						Если Не Отказ тогда
							//Сообщить(НовыйОбъект.Серии.Количество());
							КопироватьДанныеФормы(НовыйОбъект, Форма.Объект);
							//Сообщить(Форма.Объект.Разделы.Количество());
							Форма.ОбновитьОтображениеДанных();
							Форма.Модифицированность = истина;
							//КопироватьДанныеФормы(НовыйОбъект.Серии, ВладелецФормы.Объект.Серии);
							
						КонецЕсли;
						Если Сообщения.Количество() > 0 Тогда
							Для Каждого Сообщение Из Сообщения Цикл
								Сообщить(Сообщение);
							КонецЦикла;
						Иначе	
							//Закрыть();
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				//ЗагрузкаНаСервере(Адрес, ВыбранноеИмяФайла, ТаможеннаяДекларация, Отказ, Сообщения);
				//Для Каждого Сообщение Из Сообщения Цикл
				//	Сообщить(Сообщение);
				//КонецЦикла;
			КонецЕсли;
						
		КонецЕсли;	
    Иначе
        Сообщить("Файл не был помещен.");
		//Закрыть();
    КонецЕсли 
КонецПроцедуры

&НаКлиенте
Процедура Загрузка(Команда = Неопределено)
	//Первый этап - чтение файла
	
	//Попытка
	//	XLSОбъект = ПолучитьCOMОбъект(, "Excel.Application");
	//Исключение
	//	ПоказатьПредупреждение(,"Невозможно загрузить MS EXCEL !!!" + Символы.ПС + ОписаниеОшибки(), 10, "Ошибка");
	//	Возврат;
	//КонецПопытки;
	//Лист = XLSОбъект.ActiveSheet();
	//Если Лист = Неопределено Тогда 
	//	Лист = XLSОбъект.ActiveSheet;		
	//КонецЕсли;	
	//Если Лист = Неопределено Тогда 
	//	Лист = XLSОбъект.ActiveWorkbook.ActiveSheet;
	//КонецЕсли;
	Если ПустаяСтрока(СтрИмяФайла) Тогда
		Сообщить("Файл???");
		Возврат
	КонецЕсли;
	Состояние("Инициализация Excel...");
	Попытка
		XLSОбъектОсновной = Новый COMОбъект("Excel.Application");
	Исключение
		ПоказатьПредупреждение(,"Невозможно загрузить MS EXCEL !!!" + Символы.ПС + ОписаниеОшибки(), 10, "Ошибка");
		Возврат;
	КонецПопытки;		
	XLSОбъектКниги = XLSОбъектОсновной.WorkBooks;					
	Попытка
		XLSОбъект = XLSОбъектКниги.Open(СтрИмяФайла);
	Исключение
		ПоказатьПредупреждение(,"Невозможно открыть файл " + СтрИмяФайла + " !!!" + Символы.ПС + ОписаниеОшибки(), 10, "Ошибка");
		Возврат;
	КонецПопытки;		
	чНомерСтраницы=1;
	Лист = XLSОбъект.Sheets(чНомерСтраницы);
	//XLSОбъект.Application.Caption = "Открыто из 1С";
	
	Ячейка = Лист.Range("A1:Z50").Find("Всего в месяц,");
	Если Ячейка = Неопределено Тогда
		КонецКолонокНачислений = 11;
		НачалоДанных = 13;
	Иначе	
		КонецКолонокНачислений = Ячейка.Column - 1;		
		НачалоДанных = Ячейка.Row;
	КонецЕсли;	
	
	ЯчейкаПоследняяСтрока = Лист.Range("A1:E1000").Find("Итого по Обществу:");
	Если ЯчейкаПоследняяСтрока = Неопределено Тогда
		ЯчейкаПоследняяСтрока = Лист.Range("A1:E1000").Find("ВСЕГО ПО ФИЛИАЛУ");
		Если ЯчейкаПоследняяСтрока = Неопределено Тогда			
			КонСтр = 10000;
		Иначе
			КонСтр = ЯчейкаПоследняяСтрока.Row;
		КонецЕсли;	
	Иначе
		КонСтр = ЯчейкаПоследняяСтрока.Row;
	КонецЕсли;
	
	ТЗизФайла.Очистить();
	ТЗВидыНачислений.Очистить();
	ТЗДляВводаВидовНачислений.Очистить();
	
	НачСтр = НачалоДанных+1;
	Пока Лист.Cells(НачСтр,1).Text = "" или СтрДлина(Лист.Cells(НачСтр,1).Text) = 1 Цикл
		НачСтр = НачСтр + 1;
	КонецЦикла;	
	ПодразделениеСтр = "";
	УчастокСтр = "";
	
	КолонкаДолжность = Лист.Range("A"+НачалоДанных+":Z"+(НачСтр+3)).Find("Должность");
	Если КолонкаДолжность = Неопределено Тогда
		НомерКолонкиДолжность = 3;
	Иначе
		НомерКолонкиДолжность = КолонкаДолжность.Column;
	КонецЕсли;	
	КолонкаКолВоЕд = Лист.Range("A1:Z"+(НачСтр+3)).Find("Количество штатных единиц");
	Если КолонкаКолВоЕд = Неопределено Тогда
		НомерКолонкиКолВоЕд = НомерКолонкиДолжность + 1;
	Иначе
		НомерКолонкиКолВоЕд = КолонкаКолВоЕд.Column;
	КонецЕсли;
	
	СоответствиеНомеровКолонокИмен = новый Соответствие;
	Для НомерКолонки = НомерКолонкиКолВоЕд+1 По КонецКолонокНачислений Цикл
		ТекстЯчВидНач = СокрЛП(Лист.Cells(НачалоДанных,НомерКолонки).Text);
		//Если ТекстЯчВидНач = "" Тогда
			ТекстЯчВидНачСлед = СокрЛП(Лист.Cells(НачалоДанных+1,НомерКолонки).Text);
		//Иначе
		//	ТекстЯчВидНачСлед = "";
		//КонецЕсли;
		СоответствиеНомеровКолонокИмен.Вставить(НомерКолонки, СокрЛП(ТекстЯчВидНач + " " + ТекстЯчВидНачСлед));
	КонецЦикла;
	
	Для Сч=Макс(НачСтр,1) По КонСтр Цикл
		СтрокаСостояния="Обработка строки № "+Сч+" из " + КонСтр + ": ";
		Состояние(СтрокаСостояния, Сч/КонСтр*100);
				
		//чтение подразделений:
		//Лист.Cells(Сч,1).MergeArea.Address
		//Лист.Cells(Сч,1).MergeArea.Count		
		ШагиНазад = 1;
		МассивПодразделенийСтр = Новый Массив;
		Пока НомерКолонкиДолжность - ШагиНазад > 0 Цикл
			ЯчейкаИлиДиапазон = Лист.Cells(Сч,НомерКолонкиДолжность-ШагиНазад).MergeArea;
			Если ЯчейкаИлиДиапазон.Count > 1 Тогда
				//ищем первую ячейку объединенного диапазона:
				Диапазон = ЯчейкаИлиДиапазон.Address; //$A$18:$B$23
				П = СтрНайти(Диапазон, ":");
				АдресНужнойЯчейки = Лев(Диапазон, П-1);
				НужнаяЯчейка = Лист.Range(АдресНужнойЯчейки);
			Иначе
				НужнаяЯчейка = Лист.Cells(Сч,НомерКолонкиДолжность-ШагиНазад);
			КонецЕсли;	
			
			ТекстЯчейки = СокрЛП(НужнаяЯчейка.Text);
			Если ТекстЯчейки <> "" И МассивПодразделенийСтр.Найти(ТекстЯчейки) = Неопределено Тогда
				МассивПодразделенийСтр.Добавить(ТекстЯчейки);
			КонецЕсли;	
			
			ШагиНазад = ШагиНазад + 1;
		КонецЦикла;
		
		Если МассивПодразделенийСтр.Количество() > 0 Тогда
			УчастокСтр = МассивПодразделенийСтр[0];			
		КонецЕсли;
		ПодразделениеСтр = УчастокСтр;
		Если МассивПодразделенийСтр.Количество() > 1 Тогда
			ПодразделениеСтр = МассивПодразделенийСтр[1];
		КонецЕсли;
		Если МассивПодразделенийСтр.Количество() > 2 Тогда
			ПодразделениеСтр1 = ПодразделениеСтр;
			ПодразделениеСтр = МассивПодразделенийСтр[2];
		КонецЕсли;
		Если МассивПодразделенийСтр.Количество() > 3 Тогда
			ПодразделениеСтр2 = ПодразделениеСтр1;
			ПодразделениеСтр1 = ПодразделениеСтр;
			ПодразделениеСтр = МассивПодразделенийСтр[3];
		КонецЕсли;
		
		Если ПодразделениеСтр = "Итого по Обществу:" ИЛИ (СокрЛП(Лист.Cells(Сч,3).Text) = "" И СокрЛП(Лист.Cells(Сч,4).Text) = "" И СокрЛП(Лист.Cells(Сч,5).Text) = "") Тогда
			Прервать;
		КонецЕсли;
		Если ПодразделениеСтр = "Итого:" ИЛИ (СокрЛП(Лист.Cells(Сч,3).Text) = "" И СокрЛП(Лист.Cells(Сч,4).Text) = "" И СокрЛП(Лист.Cells(Сч,5).Text) = "") Тогда
			Продолжить;
		КонецЕсли;		
		Если УчастокСтр = "Итого:" Тогда
			Продолжить;
		КонецЕсли;	
		
		НовСтрТЗ = ТЗизФайла.Добавить();
		
		НовСтрТЗ.ПодразделениеСтр = ПодразделениеСтр;
		НовСтрТЗ.ПодразделениеСтр1 = ПодразделениеСтр1;
		НовСтрТЗ.ПодразделениеСтр2 = ПодразделениеСтр2;
		Если УчастокСтр = "" Тогда
			НовСтрТЗ.УчастокСтр = ПодразделениеСтр;
		Иначе	
			НовСтрТЗ.УчастокСтр = УчастокСтр;
		КонецЕсли;	
		
		ПодразделениеСтр = "";
		ПодразделениеСтр1 = "";
		ПодразделениеСтр2 = "";
		УчастокСтр = "";
		
		ДолжностьСтр=СокрЛП(Лист.Cells(Сч,НомерКолонкиДолжность).Text);
		НовСтрТЗ.ДолжностьСтр = ДолжностьСтр;
		
		КоличествоЕд=Лист.Cells(Сч,НомерКолонкиКолВоЕд).Value;
		НовСтрТЗ.КоличествоЕд = КоличествоЕд;
		
		НовСтрТЗ.ИДСтроки = Сч;
		
		Для НомерКолонки = НомерКолонкиКолВоЕд+1 По КонецКолонокНачислений Цикл
			ТекстЯчВидНач = СоответствиеНомеровКолонокИмен.Получить(НомерКолонки);//СокрЛП(Лист.Cells(НачалоДанных,НомерКолонки).Text);
			//Если ТекстЯчВидНач = "" Тогда
			//	ТекстЯчВидНачСлед = СокрЛП(Лист.Cells(НачалоДанных+1,НомерКолонки).Text);
			//Иначе
				ТекстЯчВидНачСлед = "";
			//КонецЕсли;
			ЗначТекЯчейки = Лист.Cells(Сч,НомерКолонки).Value;
			Если ЗначТекЯчейки <> Неопределено И ЗначТекЯчейки < 4 Тогда //в %
				ЗначТекЯчейки = ЗначТекЯчейки * 100;
			КонецЕсли;	
			//ТекстТекячейки = Лист.Cells(Сч,НомерКолонки).Text;
			Если ЗначТекЯчейки <> Неопределено И (ТекстЯчВидНач <> "" ИЛИ ТекстЯчВидНачСлед <> "") Тогда //СокрЛП(Лист.Cells(НачалоДанных,НомерКолонки).Text) <> "" Тогда 
				НовСтрокаНачисление = ТЗВидыНачислений.Добавить();
				НовСтрокаНачисление.ИДСтроки = Сч;
				НовСтрокаНачисление.ВидНачисленияСтр = СокрЛП(ТекстЯчВидНач + " " + ТекстЯчВидНачСлед);
				//Если НовСтрокаНачисление.ВидНачисленияСтр = "" Тогда
				//	НовСтрокаНачисление.ВидНачисленияСтр = ТекстЯчВидНачСлед;
				//КонецЕсли;
				Если СтрНайти(НовСтрокаНачисление.ВидНачисленияСтр, "Районный коэф") > 0 Тогда//или СтрНайти(НовСтрокаНачисление.ВидНачисленияСтр, "Северная над") > 0 Тогда
					НовСтрокаНачисление.Значение = ЗначТекЯчейки/100 + 1;
				Иначе
				    НовСтрокаНачисление.Значение = ЗначТекЯчейки;
					
					Если СтрНайти(НовСтрокаНачисление.ВидНачисленияСтр, "Северная надбавка") = 0 
						И ТЗДляВводаВидовНачислений.НайтиСтроки(Новый Структура("ВидНачисленияСтр", НовСтрокаНачисление.ВидНачисленияСтр)).Количество() = 0 Тогда
						ТЗДляВводаВидовНачислений.Добавить().ВидНачисленияСтр = НовСтрокаНачисление.ВидНачисленияСтр;
					КонецЕсли;	
				
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		ОбработкаПрерыванияПользователя();
	КонецЦикла;
	
	XLSОбъект.Application.Quit();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСправочники(ОбъектЗаполнения = Неопределено, СообщенияВсе = Неопределено)
	//третий этап - распознование справочников подразделений и должностей
	Запрос = Новый Запрос;
	//поиск подразделений по наименованию с учетом организации и родителя, если заполнен.
	//поиск должности по наименованию
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ТЗ.ИДСтроки КАК ИДСтроки,
	               |	ТЗ.ПодразделениеСтр КАК ПодразделениеСтр,
	               |	ТЗ.ПодразделениеСтр1 КАК ПодразделениеСтр1,
	               |	ТЗ.ПодразделениеСтр2 КАК ПодразделениеСтр2,
	               |	ТЗ.УчастокСтр КАК УчастокСтр,
	               |	ТЗ.ДолжностьСтр КАК ДолжностьСтр,
				   |	ТЗ.КоличествоЕд КАК КоличествоЕд,
				   |	ТЗ.Участок КАК Участок,
				   |	ТЗ.Должность КАК Должность,
				   |	ТЗ.Подразделение КАК Подразделение
	               |ПОМЕСТИТЬ ВТизТЗ
	               |ИЗ
	               |	&ТЗ КАК ТЗ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
				   |	ВТизТЗ.ИДСтроки КАК ИДСтроки,
	               |	ВТизТЗ.УчастокСтр КАК УчастокСтр,
	               |	ВТизТЗ.ДолжностьСтр КАК ДолжностьСтр,
	               |	ПодразделенияОрганизаций.Ссылка КАК Участок,
	               |	Должности.Ссылка КАК Должность,
	               |	ВТизТЗ.ПодразделениеСтр КАК ПодразделениеСтр,
	               |	ВТизТЗ.ПодразделениеСтр1 КАК ПодразделениеСтр1,
	               |	ВТизТЗ.ПодразделениеСтр2 КАК ПодразделениеСтр2,
				   |	ВТизТЗ.КоличествоЕд КАК КоличествоЕд
	               |ИЗ
	               |	ВТизТЗ КАК ВТизТЗ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	               |		ПО ВТизТЗ.УчастокСтр = ПодразделенияОрганизаций.Наименование
	               |			И (ВЫБОР
	               |				КОГДА ВТизТЗ.УчастокСтр = ВТизТЗ.ПодразделениеСтр
	               |					ТОГДА ИСТИНА
	               |				КОГДА ВТизТЗ.ПодразделениеСтр1 = """"
	               |					ТОГДА ВТизТЗ.ПодразделениеСтр = ПодразделенияОрганизаций.Родитель.Наименование
	               |				КОГДА ВТизТЗ.ПодразделениеСтр2 = """"
	               |					ТОГДА ВТизТЗ.ПодразделениеСтр = ПодразделенияОрганизаций.Родитель.Родитель.Наименование
	               |				ИНАЧЕ ВТизТЗ.ПодразделениеСтр = ПодразделенияОрганизаций.Родитель.Родитель.Родитель.Наименование
	               |			КОНЕЦ)
	               |			И (ПодразделенияОрганизаций.Владелец = &Организация)
	               |			И (ВЫБОР
	               |				КОГДА ВТизТЗ.ПодразделениеСтр2 = """"
	               |					ТОГДА ИСТИНА
	               |				ИНАЧЕ ВТизТЗ.ПодразделениеСтр2 = ПодразделенияОрганизаций.Родитель.Наименование
	               |			КОНЕЦ)
	               |			И (ВЫБОР
	               |				КОГДА ВТизТЗ.ПодразделениеСтр1 = """"
	               |					ТОГДА ИСТИНА
	               |				КОГДА ВТизТЗ.ПодразделениеСтр2 = """"
	               |					ТОГДА ВТизТЗ.ПодразделениеСтр1 = ПодразделенияОрганизаций.Родитель.Наименование
	               |				ИНАЧЕ ВТизТЗ.ПодразделениеСтр1 = ПодразделенияОрганизаций.Родитель.Родитель.Наименование
	               |			КОНЕЦ)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Должности КАК Должности
	               |		ПО ВТизТЗ.ДолжностьСтр = Должности.Наименование";
	Запрос.УстановитьПараметр("ТЗ", ТЗизФайла.Выгрузить(,"ИДСтроки,ПодразделениеСтр,ПодразделениеСтр1,ПодразделениеСтр2,УчастокСтр,ДолжностьСтр,КоличествоЕд,Участок,Должность,ИДСтроки,Подразделение"));
	Запрос.УстановитьПараметр("Организация", ОбъектЗаполнения.Организация);
	//ТЗизФайла.Загрузить(Запрос.Выполнить().Выгрузить());
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл    
		Если ЗначениеЗаполнено(Выборка.Участок) Тогда
			Строки = ТЗизФайла.НайтиСтроки(Новый Структура("ИДСтроки", Выборка.ИДСтроки));
			Для каждого Стр Из Строки Цикл
				Стр.Участок = Выборка.Участок;
			КонецЦикла;	
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.Должность) Тогда
			Строки = ТЗизФайла.НайтиСтроки(Новый Структура("ИДСтроки", Выборка.ИДСтроки));
			Для каждого Стр Из Строки Цикл
				Стр.Должность = Выборка.Должность;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;	
	
	ТЗ = ТЗДляВводаВидовНачислений.Выгрузить(, "ВидНачисления");
	ТЗ.Свернуть("ВидНачисления");
	//Если ТЗ.Количество() = 0 Или (ТЗ.Количество() = 1 И Не ЗначениеЗаполнено(ТЗ[0].ВидНачисления)) Тогда
		//Возврат;
	//КонецЕсли;	
	
	ВидРайонныйКоэффициент = ПланыВидовРасчета.Начисления.НачислениеРайонныйКоэффициент();	
	НачислениеРайонныйКоэффициент = ВидРайонныйКоэффициент;
	//ВидРайонныйКоэффициент = ПланыВидовРасчета.Начисления.НайтиПоНаименованию("Районный коэффициент", Истина);
	Если НЕ ЗначениеЗаполнено(ВидРайонныйКоэффициент) Тогда
		СтрРайон = ТЗДляВводаВидовНачислений.НайтиСтроки(Новый Структура("ВидНачисленияСтр", "Районный коэффициент"));
		Если СтрРайон.Количество() > 0 Тогда
			ВидРайонныйКоэффициент = СтрРайон[0].ВидНачисления;
		КонецЕсли;	
	КонецЕсли;
	СтрРайон = ТЗДляВводаВидовНачислений.Добавить();
	СтрРайон.ВидНачисления = ВидРайонныйКоэффициент;
	СтрРайон.ВидНачисленияСтр = "Районный коэффициент";
	ВидСевернаяНадбавка = ПланыВидовРасчета.Начисления.НачислениеСевернаяНадбавка();
	НачислениеСевернаяНадбавка = ВидСевернаяНадбавка;
	//ВидСевернаяНадбавка =    ПланыВидовРасчета.Начисления.НайтиПоНаименованию("Северная надбавка", Истина);
	Если НЕ ЗначениеЗаполнено(ВидСевернаяНадбавка) Тогда
		СтрСевер = ТЗДляВводаВидовНачислений.НайтиСтроки(Новый Структура("ВидНачисленияСтр", "Северная надбавка"));
		Если СтрСевер.Количество() > 0 Тогда
			ВидСевернаяНадбавка = СтрСевер[0].ВидНачисления;
		КонецЕсли;	
	КонецЕсли;
	СтрСевер = ТЗДляВводаВидовНачислений.Добавить();
	СтрСевер.ВидНачисления = ВидСевернаяНадбавка;
	СтрСевер.ВидНачисленияСтр = "Северная надбавка";
	Запрос.Текст = "ВЫБРАТЬ
	               |	НачисленияПоказатели.Ссылка КАК Ссылка,
	               |	НачисленияПоказатели.Показатель КАК Показатель
	               |ИЗ
	               |	ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
	               |ГДЕ
	               |	НачисленияПоказатели.Ссылка В(&ВидыНачислений)
	               |	И НачисленияПоказатели.Показатель.Идентификатор <> ""РасчетнаяБаза""
	               |			И (НачисленияПоказатели.ЗапрашиватьПриВводе
	               |				ИЛИ НачисленияПоказатели.ОсновнойПоказатель)";
				   //|				ИЛИ НачисленияПоказатели.ИспользоватьПриРасчете)";
	Запрос.УстановитьПараметр("ВидыНачислений", ТЗДляВводаВидовНачислений.Выгрузить(,"ВидНачисления").ВыгрузитьКолонку("ВидНачисления"));
	ТЗПоказателей = Запрос.Выполнить().Выгрузить();
	СтрСевер = ТЗПоказателей.Добавить();
	СтрСевер.Ссылка = ВидСевернаяНадбавка;//ПланыВидовРасчета.Начисления.НайтиПоНаименованию("Северная надбавка");
	СтрСевер.Показатель = Справочники.ПоказателиРасчетаЗарплаты.СевернаяНадбавка;
	
	//КолВоСтрокВидовНачислений = ТЗДляВводаВидовНачислений.Количество();
	//Для К = 1 по КолВоСтрокВидовНачислений Цикл
	//	СтрВидНачисления = ТЗДляВводаВидовНачислений[КолВоСтрокВидовНачислений-К];
		
	Для каждого СтрВидНачисления из ТЗДляВводаВидовНачислений Цикл
		Если НЕ ЗначениеЗаполнено(СтрВидНачисления.ВидНачисления) Тогда
			Продолжить;
		КонецЕсли;
		СтрокиОсновногоТЗ = ТЗВидыНачислений.НайтиСтроки(Новый Структура("ВидНачисленияСтр", СтрВидНачисления.ВидНачисленияСтр));
		Для каждого СтрокаОсновногоТЗ Из СтрокиОсновногоТЗ Цикл
			СтрокаОсновногоТЗ.ВидНачисления = СтрВидНачисления.ВидНачисления;
			СтрПоказатель = ТЗПоказателей.Найти(СтрВидНачисления.ВидНачисления);
			Если СтрПоказатель <> Неопределено Тогда 
				СтрокаОсновногоТЗ.Показатель = СтрПоказатель.Показатель;
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;
	
	//четвертый этап - этап заполнения документа:
	Если ОбъектЗаполнения <> Неопределено Тогда
		ЗаполнитьРасчетныеРеквизиты(ОбъектЗаполнения, СообщенияВсе);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСправочникиКл(Команда)
	ЗаполнитьСправочники();
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	
	Если ВладелецФормы = Неопределено тогда		
		Окна = ПолучитьОкна();
		Для каждого Окн из Окна Цикл
			Если Найти(Окн.Заголовок, "Утверждение штатного расписания") > 0 Или Найти(Окн.Заголовок, "Изменение штатного расписания") > 0 Тогда
				Форма = Окн.Содержимое.Получить(0);
				НовыйОбъект = Форма.Объект;
				Прервать;
			КонецЕсли;	
		КонецЦикла;		
	Иначе	
		Форма = ВладелецФормы;
		НовыйОбъект = Форма.Объект;
	КонецЕсли;	
	
	//Второй этап - ввод видов начислений. Пользователь вводит вручную.
	
	СообщенияВсе = новый Соответствие;
	ЗаполнитьСправочники(НовыйОбъект, СообщенияВсе);
	
	КопироватьДанныеФормы(НовыйОбъект, Форма.Объект);
	Если СтрНайти(Форма.Заголовок, "Утверждение")> 0 Тогда
		Форма.ИтогоФОТПоПозиции = НовыйОбъект.Позиции.Итог("ФОТПоПозиции");
		Форма.ИтогоФОТПоПозицииМин = НовыйОбъект.Позиции.Итог("ФОТПоПозицииМин");
		Форма.ИтогоФОТПоПозицииМакс = НовыйОбъект.Позиции.Итог("ФОТПоПозицииМакс");
	КонецЕсли;

	Форма.ОбновитьОтображениеДанных();
	Форма.Модифицированность = истина;
	//КопироватьДанныеФормы(НовыйОбъект.Серии, ВладелецФормы.Объект.Серии);
	
	Для каждого КлЗн Из СообщенияВсе Цикл
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = КлЗн.Ключ;
		Если ТипЗнч(КлЗн.Значение) = Тип("Число") Тогда
			Текст = "В строке " + Формат(КлЗн.Значение,"ЧГ=") + " " + Сообщение.Текст;
			Если СтрНайти(КлЗн.Ключ, "Подразделение не найдено") > 0 Тогда
				Сообщение.Поле = "Объект.Позиции["+Формат(КлЗн.Значение-1,"ЧГ=")+"].Подразделение";
			Иначе	
				Сообщение.Поле = "Объект.Позиции["+Формат(КлЗн.Значение-1,"ЧГ=")+"].Должность";
			КонецЕсли;	
			Сообщение.Текст = Текст;
		Иначе	
			Сообщение.УстановитьДанные(КлЗн.Значение);
			Сообщение.КлючДанных = КлЗн.Значение;
		КонецЕсли;	
		Сообщение.ИдентификаторНазначения = Форма.УникальныйИдентификатор;
		Сообщение.Сообщить();
	КонецЦикла;
	//Форма.ПроверитьЗаполнение();
	Закрыть();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРасчетныеРеквизиты(ОбъектЗаполнения, СообщенияВсе)
	Объект.Ссылка = ОбъектЗаполнения;
	ДоступноЧтениеНачисленийШтатногоРасписания = Истина;
	//МассивСообщенийСН = новый массив;
	//МассивСообщенийРК = Новый Массив;
	СообщенияВсе = Новый Соответствие;
	МассивПоказателейНеРасчетных = Новый Массив;
	МассивПоказателейНеРасчетных.Добавить(Справочники.ПоказателиРасчетаЗарплаты.Оклад);
	МассивПоказателейНеРасчетных.Добавить(Справочники.ПоказателиРасчетаЗарплаты.ОкладПоДолжности);
	МассивПоказателейНеРасчетных.Добавить(Справочники.ПоказателиРасчетаЗарплаты.ДневнойТарифПоДолжности);
	МассивПоказателейНеРасчетных.Добавить(Справочники.ПоказателиРасчетаЗарплаты.ЧасовойТарифПоДолжности);
	МассивПоказателейНеРасчетных.Добавить(Справочники.ПоказателиРасчетаЗарплаты.ТарифнаяСтавкаДневная);
	МассивПоказателейНеРасчетных.Добавить(Справочники.ПоказателиРасчетаЗарплаты.ТарифнаяСтавкаЧасовая);
	Для Каждого СтрТЗ Из ТЗизФайла Цикл
		НоваяСтрокаПозиции = ОбъектЗаполнения.Позиции.Добавить();
		ИдентификаторТекущейПозиции = НоваяСтрокаПозиции.ПолучитьИдентификатор() + 1;
		НоваяСтрокаПозиции.Подразделение = СтрТз.Участок;
		Если не ЗначениеЗаполнено(СтрТз.Участок) Тогда
			ТекстОшибкиПодр = СтрТЗ.ПодразделениеСтр 
				+ ?(ПустаяСтрока(СтрТЗ.ПодразделениеСтр1), "", " - " + СтрТЗ.ПодразделениеСтр1) 
				+ ?(ПустаяСтрока(СтрТЗ.ПодразделениеСтр2), "", " - " + СтрТЗ.ПодразделениеСтр2) 
				+ " - " + СтрТЗ.УчастокСтр;
			СообщенияВсе.Вставить("Подразделение не найдено: " + ТекстОшибкиПодр, ОбъектЗаполнения.Позиции.Количество());
		КонецЕсли;	
		НоваяСтрокаПозиции.Должность = СтрТз.Должность;
		Если НЕ ЗначениеЗаполнено(СтрТз.Должность) Тогда
			СообщенияВсе.Вставить("Должность " + СтрТЗ.ДолжностьСтр + " не найдена!", ОбъектЗаполнения.Позиции.Количество());
		КонецЕсли;	
		НоваяСтрокаПозиции.КоличествоСтавок = СтрТз.КоличествоЕд;
		//НоваяСтрокаПозиции.ИдентификаторСтрокиПозиции = -1;//ИдентификаторТекущейПозиции;//пока не заполнять
		НоваяСтрокаПозиции.Действие = ПредопределенноеЗначение("Перечисление.ДействияСПозициямиШтатногоРасписания.СоздатьНовуюПозицию");
		НоваяСтрокаПозиции.Наименование = УправлениеШтатнымРасписаниемКлиентСервер.НаименованиеПозицииШтатногоРасписания(НоваяСтрокаПозиции.Подразделение, НоваяСтрокаПозиции.Должность);
		
		Объект.Начисления.Очистить(); //это промежуточные таблицы на этапе заполнения документа
		Объект.Показатели.Очистить(); //это промежуточные таблицы на этапе заполнения документа
		СтрокиВидыНачисления = ТЗВидыНачислений.НайтиСтроки(Новый Структура("ИДСтроки", СтрТЗ.ИДСтроки));
		ТекОкладТариф = 0;
		Для Каждого СтрокаВидаНачисления Из СтрокиВидыНачисления Цикл 
			Если НЕ ЗначениеЗаполнено(СтрокаВидаНачисления.ВидНачисления) Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаВидаНачисления.ВидНачисления = ВидРайонныйКоэффициент Тогда
				НоваяСтрокаПозиции.РайонныйКоэффициентРазмер = СтрокаВидаНачисления.Значение;
				НоваяСтрокаПозиции.РайонныйКоэффициент = СтрокаВидаНачисления.Значение;
				//Проверка рай коэф с файлом. Если не соответствует, то выводим сообщение.
				Если СтрТз.Участок.РайонныйКоэффициент <> СтрокаВидаНачисления.Значение Тогда
					Текст = "У подразделения " + СтрТз.УчастокСтр + " районный коэффициент("+СтрТз.Участок.РайонныйКоэффициент+") не равно значению из файла(" + СтрокаВидаНачисления.Значение+")";
					СообщенияВсе.Вставить(текст, СтрТз.Участок);
					
					//Если МассивСообщенийРК.Найти(СтрТз.Участок) = Неопределено Тогда												
					//	Сообщение = Новый СообщениеПользователю;
					//	Сообщение.ИдентификаторНазначения = ВладелецФормы.УникальныйИдентификатор; недоступно
					//	Сообщение.Текст = "У подразделения " + СтрТз.УчастокСтр + " районный коэффициент("+СтрТз.Участок.РайонныйКоэффициент+") не равно значению из файла(" + СтрокаВидаНачисления.Значение+")";
					//	Сообщение.УстановитьДанные(СтрТз.Участок);
					//	Сообщение.КлючДанных = СтрТз.Участок;
					//	Сообщение.Сообщить();
					//	МассивСообщенийРК.Добавить(СтрТз.Участок);
					//КонецЕсли;
				КонецЕсли;
			ИначеЕсли СтрокаВидаНачисления.ВидНачисления = ВидСевернаяНадбавка Тогда
				НоваяСтрокаПозиции.СевернаяНадбавкаРазмер = СтрокаВидаНачисления.Значение;
				НоваяСтрокаПозиции.ПроцентСевернойНадбавки = СтрокаВидаНачисления.Значение;
				//Проверка сев надб с файлом. Если не соответствует, то выводим сообщение.
				Если СтрТз.Участок.ПроцентСевернойНадбавки <> СтрокаВидаНачисления.Значение Тогда
					Текст = "У подразделения " + СтрТз.УчастокСтр + " северная надбавка("+СтрТз.Участок.ПроцентСевернойНадбавки+") не равно значению из файла(" + (СтрокаВидаНачисления.Значение)+")";
					СообщенияВсе.Вставить(текст, СтрТз.Участок);
					
					//Если МассивСообщенийСН.Найти(СтрТз.Участок) = Неопределено Тогда
					//	Сообщение = Новый СообщениеПользователю;
					//	Сообщение.ИдентификаторНазначения = ВладелецФормы.УникальныйИдентификатор;
					//	Сообщение.Текст = "У подразделения " + СтрТз.УчастокСтр + " северная надбавка("+СтрТз.Участок.ПроцентСевернойНадбавки+") не равно значению из файла(" + (СтрокаВидаНачисления.Значение*100)+")";
					//	Сообщение.УстановитьДанные(СтрТз.Участок);
					//	Сообщение.КлючДанных = СтрТз.Участок;
					//	Сообщение.Сообщить();
					//	МассивСообщенийСН.Добавить(СтрТз.Участок);
					//КонецЕсли;
				КонецЕсли;	
			Иначе			
			
				НоваяСтрокаНачисления = Объект.Начисления.Добавить();
				//НоваяСтрокаНачисления.ИдентификаторСтрокиПозиции = ИдентификаторТекущейПозиции; //пока не заполнять
				НоваяСтрокаНачисления.ИдентификаторСтрокиВидаРасчета = НоваяСтрокаНачисления.ПолучитьИдентификатор()+1;
				НоваяСтрокаНачисления.Действие = ПредопределенноеЗначение("Перечисление.ДействияСНачислениямиИУдержаниями.Утвердить");
				//НоваяСтрокаНачисления.ИдентификаторСтрокиПозиции = -1;
				//ВидыНачислений = ТЗДляВводаВидовНачислений.НайтиСтроки(Новый Структура("ВидНачисленияСтр", СтрокаВидаНачисления.ВидНачисленияСтр));
				НоваяСтрокаНачисления.Начисление = СтрокаВидаНачисления.ВидНачисления;
				НоваяСтрокаНачисления.Размер = СтрокаВидаНачисления.Значение;
				НоваяСтрокаНачисления.РазмерМин = СтрокаВидаНачисления.Значение;
				НоваяСтрокаНачисления.РазмерМакс = СтрокаВидаНачисления.Значение;
				//ЗаполнитьЗначенияСвойств(Начисления.Добавить(), НоваяСтрокаНачисления);
				НоваяСтрокаНачисления.Показатель1 = СтрокаВидаНачисления.Показатель;
				НоваяСтрокаНачисления.Значение1 = СтрокаВидаНачисления.Значение;
				НоваяСтрокаНачисления.МинимальноеЗначение1 = СтрокаВидаНачисления.Значение;
				НоваяСтрокаНачисления.МаксимальноеЗначение1 = СтрокаВидаНачисления.Значение;
				
				НоваяСтрокаПоказатель = Объект.Показатели.Добавить();
				НоваяСтрокаПоказатель.ИдентификаторСтрокиВидаРасчета = НоваяСтрокаНачисления.ИдентификаторСтрокиВидаРасчета;
				НоваяСтрокаПоказатель.Показатель = СтрокаВидаНачисления.Показатель;
				//НоваяСтрокаПоказатель.ИдентификаторСтрокиПозиции = -1;//ИдентификаторТекущейПозиции; \\пока не заполнять...
				НоваяСтрокаПоказатель.Значение = СтрокаВидаНачисления.Значение;
				НоваяСтрокаПоказатель.ЗначениеМин = СтрокаВидаНачисления.Значение;
				НоваяСтрокаПоказатель.ЗначениеМакс = СтрокаВидаНачисления.Значение;
				
				Если МассивПоказателейНеРасчетных.Найти(СтрокаВидаНачисления.Показатель) <> Неопределено Тогда
					ТекОкладТариф = СтрокаВидаНачисления.Значение;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		//Если ЗначениеЗаполнено(НоваяСтрокаПозиции.Должность) И ЗначениеЗаполнено(НоваяСтрокаПозиции.Подразделение) Тогда
			УправлениеШтатнымРасписанием.РассчитатьФОТВФормеСОднойПозицией(ЭтотОбъект, НоваяСтрокаПозиции, ОбъектЗаполнения.Организация, ТекущаяДатаСеанса(), ОписаниеТаблицыНачисленийНаСервере());
		//Иначе	
		//	НоваяСтрокаПозиции.ОкладТариф = ТекОкладТариф;
		//КонецЕсли;	
		
		НоваяСтрокаПозиции.ИдентификаторСтрокиПозиции = ИдентификаторТекущейПозиции;
		Для каждого СтрНачисление из Объект.Начисления Цикл
			НовСтрокаНачисление = ОбъектЗаполнения.Начисления.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрокаНачисление, СтрНачисление);
			НовСтрокаНачисление.ИдентификаторСтрокиПозиции = ИдентификаторТекущейПозиции;
		КонецЦикла;
		Для каждого СтрПоказатель из Объект.Показатели Цикл
			НовСтрокаПоказатель = ОбъектЗаполнения.Показатели.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрокаПоказатель, СтрПоказатель);
			НовСтрокаПоказатель.ИдентификаторСтрокиПозиции = ИдентификаторТекущейПозиции; 
		КонецЦикла;
		
		//ДанныеТекущейПозиции = Объект.Позиции.НайтиПоИдентификатору(ИдентификаторСтроки);
		ДанныеНачислений = ОбъектЗаполнения.Начисления.Выгрузить(Новый Структура("ИдентификаторСтрокиПозиции", НоваяСтрокаПозиции.ИдентификаторСтрокиПозиции));
		Если ДанныеНачислений.Количество() > 0 И ЗначениеЗаполнено(ДанныеНачислений[0].Начисление) Тогда				
			РассчитатьИтогиФОТПоПозиции(НоваяСтрокаПозиции, ДанныеНачислений, ОписаниеТаблицыНачисленийНаСервере());
		КонецЕсли;	
		НоваяСтрокаПозиции.ФОТПоПозиции = НоваяСтрокаПозиции.ФОТ;
		//Если НоваяСтрокаПозиции.Свойство("Комментарий") Тогда		
		//	НоваяСтрокаПозиции.Комментарий = УправлениеШтатнымРасписаниемКлиентСервер.ПолучитьКомментарийКДействиюСПозициейШР(
		//		НоваяСтрокаПозиции, ЭтотОбъект);		
		//КонецЕсли;
	
		
	КонецЦикла;

	//РассчитатьФОТПозицийШтатногоРасписания(ОбъектЗаполнения, ТекущаяДата()); 
	//УправлениеШтатнымРасписаниемФормы.ЗаполнитьИтоговыйФОТПоПозициям(ЭтотОбъект, ОбъектЗаполнения.Позиции);
	
КонецПроцедуры	

&НаСервере
Процедура РассчитатьФОТПозицийШтатногоРасписания(ВремОбъект, ДатаВступленияВСилу, СписокПозиций = Неопределено) Экспорт
	
	ОписаниеПозиций = Новый Структура;
	ОписаниеПозиций.Вставить("Организация", ВремОбъект.Организация);
	ОписаниеПозиций.Вставить("ДатаВступленияВСилу", ДатаВступленияВСилу);
	
	КоллекцияПозиций = УправлениеШтатнымРасписанием.ПустаяТаблицаКоллекцииПозицийДляРасчетаФОТ();
	КоллекцияНачислений = УправлениеШтатнымРасписанием.ПустаяТаблицаКоллекцииНачисленийДляРасчетаФОТ();
	КоллекцияПоказателей = УправлениеШтатнымРасписанием.ПустаяТаблицаКоллекцииПоказателейДляРасчетаФОТ();
	
	//Если СписокПозиций = Неопределено Тогда
	//	ПересчитываемыеПозиции = Объект.Позиции.ВыгрузитьКолонку("Позиция");
	//Иначе
	//	ПересчитываемыеПозиции = СписокПозиций;
	//КонецЕсли;
	//ПересчитываемыеПозиции = ВремОбъект.Позиции;
	//Для каждого ПересчитываемаяПозиция Из ПересчитываемыеПозиции Цикл
		
		СтрокиПозиции = ВремОбъект.Позиции.Выгрузить();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокиПозиции, КоллекцияПозиций);
		
		Для каждого СтрокаПозиции Из СтрокиПозиции Цикл
			
			СтрокиНачислений = ВремОбъект.Начисления.Выгрузить();//Новый Структура("ИдентификаторСтрокиПозиции", СтрокаПозиции.ИдентификаторСтрокиПозиции));
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокиНачислений, КоллекцияНачислений);
			
			СтрокиПоказателей = ВремОбъект.Показатели.Выгрузить();//Новый Структура("ИдентификаторСтрокиПозиции", СтрокаПозиции.ИдентификаторСтрокиПозиции));
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокиПоказателей, КоллекцияПоказателей);
			
		КонецЦикла;
		
	//КонецЦикла;
	
	ОписаниеПозиций.Вставить("Позиции", КоллекцияПозиций);
	ОписаниеПозиций.Вставить("Начисления", КоллекцияНачислений);
	ОписаниеПозиций.Вставить("Показатели", КоллекцияПоказателей);
	
	УправлениеШтатнымРасписанием.РассчитатьФОТНесколькихПозиций(ОписаниеПозиций);
	
	Для каждого СтрокаПозиции Из КоллекцияПозиций Цикл
		
		СтрокиПозицииДокумента = ВремОбъект.Позиции.НайтиСтроки(Новый Структура("Позиция", СтрокаПозиции.Позиция));
		Если СтрокиПозицииДокумента.Количество() > 0 Тогда
			
			СтрокаПозицииДокумента = СтрокиПозицииДокумента[0];
			ЗаполнитьЗначенияСвойств(СтрокаПозицииДокумента, СтрокаПозиции, СвойстваПозицииСРезультатамиРасчетаФОТ());
			
			РассчитанныеСтрокиНачислений = КоллекцияНачислений.НайтиСтроки(Новый Структура("ИдентификаторСтрокиПозиции", СтрокаПозиции.ИдентификаторСтрокиПозиции));
			Для каждого РассчитаннаяСтрока Из РассчитанныеСтрокиНачислений Цикл
				
				СтрокиНачисленийДокумента = Объект.Начисления.НайтиСтроки(
					Новый Структура("ИдентификаторСтрокиПозиции,Начисление", РассчитаннаяСтрока.ИдентификаторСтрокиПозиции, РассчитаннаяСтрока.Начисление));
					
				Для каждого СтрокаНачисленийДокумента Из СтрокиНачисленийДокумента Цикл
					ЗаполнитьЗначенияСвойств(СтрокаНачисленийДокумента, РассчитаннаяСтрока, "Размер,РазмерМин,РазмерМакс");
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СвойстваПозицииСРезультатамиРасчетаФОТ()
	
	Возврат
		"ОкладТариф,
		|ОкладТарифМин,
		|ОкладТарифМакс,
		|ФОТ,
		|ФОТМин,
		|ФОТМакс,
		|НадбавкаЗаВредностьРазмер,
		|НадбавкаЗаВредностьРазмерМин,
		|НадбавкаЗаВредностьРазмерМакс,
		|РайонныйКоэффициентРазмер,
		|РайонныйКоэффициентРазмерМин,
		|РайонныйКоэффициентРазмерМакс,
		|СевернаяНадбавкаРазмер,
		|СевернаяНадбавкаРазмерМин,
		|СевернаяНадбавкаРазмерМакс";
	
КонецФункции

&НаСервере
Функция ОписаниеТаблицыНачисленийНаСервере()
	ОписаниеТаблицыВидовРасчета = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыПлановыхНачислений();
	ОписаниеТаблицыВидовРасчета.ИмяРеквизитаДокументОснование = "";
	//ОписаниеТаблицыВидовРасчета.ПутьКДанным = "Объект.Начисления";
	//ОписаниеТаблицыВидовРасчета.ПутьКДаннымПоказателей = "Объект.Показатели";
	Возврат ОписаниеТаблицыВидовРасчета;
КонецФункции	

&НаСервере
Процедура РассчитатьИтогиФОТПоПозиции(ДанныеТекущейПозиции, ТаблицаНачислений, ОписаниеТаблицыНачислений) Экспорт
	
	ФОИспользоватьВилкуСтавокВШтатномРасписании = ПолучитьФункциональнуюОпциюФормы("ИспользоватьВилкуСтавокВШтатномРасписании");
	
	Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
		
		ДанныеТекущейПозиции.ФОТМин =
			ИтогФОТПоРеквизиту(ТаблицаНачислений, "РазмерМин")
			+ ДанныеТекущейПозиции.НадбавкаЗаВредностьРазмерМин
			+ ДанныеТекущейПозиции.РайонныйКоэффициентРазмерМин
			+ ДанныеТекущейПозиции.СевернаяНадбавкаРазмерМин;
		
		ДанныеТекущейПозиции.ФОТМакс =
			ИтогФОТПоРеквизиту(ТаблицаНачислений, "РазмерМакс")
			+ ДанныеТекущейПозиции.НадбавкаЗаВредностьРазмерМакс
			+ ДанныеТекущейПозиции.РайонныйКоэффициентРазмерМакс
			+ ДанныеТекущейПозиции.СевернаяНадбавкаРазмерМакс;
		
		ДанныеТекущейПозиции.ФОТ = ДанныеТекущейПозиции.ФОТМакс;
		
	Иначе
		
		ДанныеТекущейПозиции.ФОТ =
			ИтогФОТПоРеквизиту(ТаблицаНачислений, "Размер")
			+ ДанныеТекущейПозиции.НадбавкаЗаВредностьРазмер
			+ ДанныеТекущейПозиции.РайонныйКоэффициентРазмер
			+ ДанныеТекущейПозиции.СевернаяНадбавкаРазмер;
		
		ДанныеТекущейПозиции.ФОТМин = ДанныеТекущейПозиции.ФОТ;
		ДанныеТекущейПозиции.ФОТМакс = ДанныеТекущейПозиции.ФОТ;
		
	КонецЕсли;
	
	Если ДанныеТекущейПозиции.Свойство("Комментарий") Тогда
		
		ДанныеТекущейПозиции.Комментарий = УправлениеШтатнымРасписаниемКлиентСервер.ПолучитьКомментарийКДействиюСПозициейШР(
			ДанныеТекущейПозиции, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИтогФОТПоРеквизиту(ТаблицаНачислений, ИмяРеквизита)
	
	ИтогФОТ = 0;
	
	Для каждого СтрокаТаблицаНачислений Из ТаблицаНачислений Цикл
		
		Если ТипЗнч(ТаблицаНачислений) = Тип("ТаблицаЗначений") Тогда
			Если ТаблицаНачислений.Колонки.Найти("Действие") <> Неопределено
				И СтрокаТаблицаНачислений.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить Тогда
				Продолжить;
			КонецЕсли; 
		Иначе
			Если СтрокаТаблицаНачислений.Свойство("Действие")
				И СтрокаТаблицаНачислений.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли;
		
		ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаТаблицаНачислений.Начисление);
		Если ВидРасчетаИнфо.ВключатьВФОТ Тогда
			ИтогФОТ = ИтогФОТ + СтрокаТаблицаНачислений[ИмяРеквизита];
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИтогФОТ;
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//ПараметрыПомещения = Новый Структура("ОбъектыНазначения", ОбъектыНазначения);
	//ПараметрыПомещения = Новый Структура;
	//ОбработкаОкончанияПомещения = Новый ОписаниеОповещения("ОбработчикОкончанияПомещения", ЭтотОбъект, ПараметрыПомещения); обращение к серверу не требуется.
	Если НЕ ВладелецФормы = Неопределено тогда
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Диалог.Фильтр = "Файлы Excel (*.xls*)|*.xls*";//|Файлы Excel (*.xls)|*.xls";
		Если Диалог.Выбрать() Тогда
			СтрИмяФайла = Диалог.ПолноеИмяФайла;
		КонецЕсли;	
		
		//ОткрытьФорму("ОбщаяФорма.ДлительнаяОперация", Новый Структура("ТекстСообщения", "Загрузка данных из Excel..."));
		Загрузка();
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтрИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Фильтр = "Файлы Excel (*.xls*)|*.xls*";//|Файлы Excel (*.xls)|*.xls";
	Если Диалог.Выбрать() Тогда
		СтрИмяФайла = Диалог.ПолноеИмяФайла;
	КонецЕсли;
КонецПроцедуры
